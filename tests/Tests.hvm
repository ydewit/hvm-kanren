
(RunTests (List.cons t ts)) = (List.cons (RunTest t) (RunTests ts))
(RunTests []          ) = []

(RunTest (TestCase name test)) = (TestResult name test)

(AssertEqual []               []              ) = (True)
(AssertEqual []               y               ) = (False)
(AssertEqual x                []              ) = (False)
(AssertEqual (List.cons x xs) (List.cons y ys)) = (List.cons (AssertEqual x y) (AssertEqual xs ys))
(AssertEqual (Pair x xv)      (Pair y yv)     ) = (AssertEqual [x,xv] [y,yv])
(AssertEqual (LVar x)         (LVar y)        ) = (If (== x y) True False)
(AssertEqual x                y               ) = (If (== x y) True False)

// (ShowResults (List.cons r rs)) = (List.cons (ShowResult r) (ShowResults rs))
// (ShowResults  []                = [])

// (ShowResult (TestResult name result)) =

(Main) =
    let SUSBT0 = (Subst.Empty)
    let SUBST1 = (Subst.Unit (LVar 1) 10)
    let SUBST2 = (ExtSubst SUBST1 (LVar 2) 20)
    let SUBST3 = (ExtSubst SUBST2 (LVar 3) 30)

    (RunTests [
        // Substitution
        (TestCase "Test empty subst"     (AssertEqual Subst.Empty []))
        (TestCase "Test simple subst"    (AssertEqual SUBST1      [(Pair (LVar 1) 10)]))
        (TestCase "Test subst extension" (AssertEqual SUBST2      [(Pair (LVar 2) 20),(Pair (LVar 1) 10)]))
        (TestCase "Test subst extension2"(AssertEqual SUBST3      [(Pair (LVar 3) 30),(Pair (LVar 2) 20),(Pair (LVar 1) 10)]))

        (TestCase "Test find on empty subst" (AssertEqual (Find (LVar 0) SUBST0) (LVar 0)))
        (TestCase "Test find on empty subst" (AssertEqual (Find (LVar 1) SUBST0) (LVar 1)))
        (TestCase "Test find on empty subst" (AssertEqual (Find (LVar 1) SUBST1) 10))
        (TestCase "Test find on empty subst" (AssertEqual (Find (LVar 2) SUBST2) 20))

        // Unification
    // (Unify (LVar 1) (LVar 1) [])   // == [] there is nothing to unify since they are the same
    // (Unify 10 (LVar 1) [])   // == [(Pair (LVar 1) 10)]
    // (Unify (LVar 1) (LVar 2) Nil)   // == [(Pair (LVar 1) (LVar 2))] add new subst
    // (Unify (LVar 1) (LVar 1) Test.Subst1)   // == [(Pair (LVar 1) 10)] no changes to substitution
    // (Unify (LVar 2) (LVar 2) Test.Subst2)   // == [(Pair (LVar 2) 20), (Pair (LVar 1) 10)] -- no change to subst
    // (Unify 2 4 Test.Subst3)                 // == 0 -- dont unify
    // (Unify (Pair (LVar 4) 50) (Pair 40 (LVar 5)) [])                 // == [(Pair (LVar 5) 50), (Pair (LVar 4) 40)] add new subst
    // (Unify [] [] Test.Subst3)                 // == [(Pair (LVar 3) 30), (Pair (LVar 2) 20), (Pair (LVar 1) 10)] -- subst unchanged
    // (Unify [(LVar 4)] [40] [])                 // == [(Pair (LVar 4) 40)] add new subst
    // (Unify [(LVar 4), (LVar 5)] [40, 50] [])                 // == [(Pair (LVar 4) 40)] add new subst

        // Goals

    // ((Equal (LVar 1) (LVar 1)) (State.Empty)) // Stream -- [(State [] 0)]
    // ((Equal (LVar 1) 10) (State.Empty)) // Stream -- [(State [(Pair (LVar 1) 10)] 0)]
    // ((Equal 1 2) (State.Empty)) // Stream -- [(State [(Pair (LVar 1) 10)] 0)]

    // (Test.Goal0) // diverges ...
    // ((call/fresh (lambda (q) (≡ q 5))) empty-state) ; #(0)5
    // ((Fresh λx( (Equal x (A 2)) )) (State.Empty))
    // ((Fresh2 λxλy(Equal y 5)) (State.Empty))
    // ((Fresh3 λxλyλz(Equal z 5)) (State.Empty))
    // ((Fresh3 λxλyλz(Conj (Equal x z) (Equal x z))) (State.Empty))
    // (RunMany 4 λx( (Equal x 5) ))
    // (RunAll λx( (Equal x 5) ))
    // (Run 2 λx( (Test.Goal.Fives x) )) // diverges!!
    // (Equal.Test1)

    // TODO test disj
    //  ((disj
    //      (call/fresh
    //          (λ (x)
    //              (== 'z x)))
    //      (call/fresh
    //          (λ (x)
    //              (== '(s z) x))))
    //     '(() . 0))
    // '((((0 . z)) . 1) (((0 . (s z))) . 1))
    // ((Disj
    //     (Fresh λx( (Equal Z x)           ))
    //     (Fresh λx( (Equal (Pair S Z) x)  ))
    // ) State.Empty)

    // TODO test conj
    //  ((call/fresh
    //      (λ (x)
    //          (call/fresh
    //              (λ (y)
    //                (conj
    //                  (== y x)
    //                  (== 'z x))))))
    //    '(() . 0))
    // '((((0 . z) (1 . 0)) . 2))
    // ((Fresh2 λxλy( (Conj (Equal y x) (Equal Z x) )) ) State.Empty) // [(State [(Pair (LVar 0) (Z)), (Pair (LVar 1) (LVar 0))] 2)]

    ])


// (Test.Goal0) = (Fresh λx( (Test.Goal.Fives x) ))
//     (Test.Goal.Fives x) = (Disj (Equal x 5) (Test.Goal.Fives x))
