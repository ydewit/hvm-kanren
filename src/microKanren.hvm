// x ∈ Var
// s ∈ Symbol
// b ∈ Bool
// Term ::= x | s | b | [] | (Pair Term Term)

// Goal :: State ⟶ Stream
// State :: Subst ⨯ Nat
// Stream :: Mature | Immature
// Mature :: () | State ⨯ Stream
// Immature :: Unit ⟶ Stream

// UTILS
// -----

// (If U60 a a) : a
(If 1 t f) = t
(If 0 t f) = f
(If _ t f) = f // Anything other than 0 and 1 is false

// STATE
// -----

// Holds the goal state comprised of the substitution list and the variable counter
// (State.Empty) : (State Subst U60)
(State.Empty) = (State [] 0)
// (State.Unit Subst U60) : (State Subst U60)
(State.Unit s c) = (State s c)

// STREAM
// ------

// (Stream.Empty) : List (State Subst U60)
(Stream.Empty) = Nil
// (Stream.Unit State) : List (State Subst U60)
(Stream.Unit state) = [state Stream.Empty]


// bind is required in the implementation of conj.
// When a goal constructed from conj is invoked, the goal g1
// is invoked on the current state; the result of this invocation
// is a nite stream (represented as a proper nite list).

// Bind : Stream -> (State -> Stream) -> Stream
(Bind []               fn) = []
(Bind (List.cons x xs) fn) = (MPlus (fn x) (Bind xs fn))
// (Bind 0           fn) = 0
// (Bind x           fn) = (fn x)
// (Bind (Some n)    fn) = (fn n)
// (Bind None        fn) =

// MonadPlus
// ---------
// The MonadPlus interface provides two primitives, mzero and
// mplus, for expressing backtracking computations.

// The mplus operator is responsible for merging streams.
// In a goal constructed from disj, the resulting stream
// contains the states that result from success of either
// of the two goals.

// MPlus is a disjunction of goals
// MPlus : Stream -> Stream -> Stream
(MPlus list             []  ) = list
(MPlus []               list) = list
(MPlus (List.cons x xs) list) = (List.cons x (MPlus list xs)) // invert list to interleave
// (List.cons x (MPlus xs stream))

(Some n fn) = (fn n)
(None fn) = (fn)

// Take `n` items from the list
(Take n []              ) = []
(Take 0 _               ) = []
(Take n (List.cons x xs)) = (List.cons x (Take (- n 1) xs))

// // Just a test (returns 2)
// Main = (Head (Tail (Tail Nats)))


(Subst.Empty) = []

// SUBST.UNIT
// ----------
//
// Subst.Unit: List Binding
(Subst.Unit var val) = (ExtSubst Nil var val)

// EXTSUBST
// --------
// Extends a given substitution with a var and a term value.
//
// ExtSubst (s: Subst) (var: LVar) (val: Term) : Subst
(ExtSubst s var val) = (List.cons (Pair var val) s)

// #| Occurs: Var x Term x Subst -> Bool |#
// (Occurs (LVar n) )


// FIND
// ----
// Finds the value from a given substitution.
// TODO check for circularity
//
// Find : LVar -> Subst -> (U60 -> <A>) (LVar -> <A>) -> <A>
(Find (LVar n) (List.cons (Pair (LVar n2) val) xs)) = (If (== n n2) val (Find (LVar n) xs))
(Find u        subst                              ) = u

// UNIFY
// -----
// Unify two terms based on a given substitution.
//
// Unify (u: Term) (v: Term) (s: Subst) (tFn : Subst -> <result>) (eFn: Term -> Term -> <result>) : <result>
(Unify u v s tFn eFn) = (Unify.Go (Find u s) (Find v s) s tFn eFn)
    (Unify.Go (Pair u1 u2)     (Pair v1 v2)     s thenFn failFn) = (Unify.Go (Find u1 s) (Find v1 s) s λs( (Unify.Go (Find u2 s) (Find v2 s) s λs(s) λs(0)) ) λuλv(0))
    (Unify.Go (LVar u)         (LVar v)         s thenFn failFn) = (If (== u v) (thenFn s) (thenFn (ExtSubst s (LVar u) (LVar v))))
    (Unify.Go (LVar u)         v                s thenFn failFn) = (thenFn (ExtSubst s (LVar u) v))
    (Unify.Go u                (LVar v)         s thenFn failFn) = (Unify (LVar v) u s thenFn failFn) //  (ExtSubst s (LVar v) u)
    (Unify.Go []               []               s thenFn failFn) = (thenFn s)
    (Unify.Go (List.cons u us) (List.cons v vs) s thenFn failFn) = (Unify.Go (Find u s) (Find v s) s λs( (Unify.Go (Find us s) (Find vs s) s λs(s) λs(0)) ) λuλv(0))
    (Unify.Go u                 v               s thenFn failFn) = (If (== u v) (thenFn s) (failFn u v)) // else False


// EQUAL
// -----
// Constructs a goal that unifies two terms given a substitution.
//
// For example:
// ```
// (Equal x 12)
//
// ```
// Equal (u: Term) (v: Term) : (State -> Stream)
(Equal u v) = λstate( (Equal.Go u v state) )
    (Equal.Go u v (State s c)) =
        (Unify u v s
            λs(  [(State s c)]  ) // return the singleton stream
            λuλv(  []  ))         // return an empty stream (failed to unify)


// FRESH
// -----
// Constructs a new fresh LVar that can be used in nested goals.
//
// For example:
// ```
// (Fresh λx(
//      Succeed))
// ```
// Fresh (f: LVar -> Stream) : (State -> Stream)
(Fresh fn) = λstate( (Fresh.Go fn state) )
    (Fresh.Go fn (State s c)) = ((fn (LVar c)) (State s (+ c 1)))

// For example:
// ```
// (Fresh2 λxλy(
//  (Equal y x) )
// ```
// Fresh2 (f: LVar -> LVar -> Stream) : (State -> Stream)
(Fresh2 fn) = (λstate( (Fresh2.Go fn state) ))
    (Fresh2.Go fn (State s c)) = ( (fn (LVar c) (LVar (+ c 1))) (State s (+ c 2)) )

// For example:
// ```
// (Fresh3 λxλyλz(
//  (Conj
//      (Equal y x)
//      (Equal y z) ))
// ```
// Fresh3 (f: LVar -> LVar -> LVar -> Stream) : (State -> Stream)
(Fresh3 fn) = (λstate( (Fresh3.Go fn state) ))
    (Fresh3.Go fn (State s c)) = ( (fn (LVar c) (LVar (+ c 1)) (LVar (+ c 2))) (State s (+ c 3)) )

// DISJ
// ----
// Constructs a disjoint goal based on two goals.
//
// For example:
// ```
// (Disj
//     (Fresh λx( (Equal Z x)           ))
//     (Fresh λx( (Equal (Pair S Z) x)  )) )
// ```
// or
// ```
// (Fresh λx(
//      (Disj
//          (Equal Z x)
//          (Equal (Pair S Z) x)) )
// ```
// Disj (g1: State -> Stream) (g2: State -> Stream) : (State -> Stream)
(Disj g1 g2) = λstate( (MPlus (g1 state) (g2 state)) )

// CONJ
// ----
// Constructs a conjunction goal based on two goals that will be
// both be evaluated in any order (fair).
//
// For example:
// ```
// (Fresh2 λxλy(
//      (Conj
//          (Equal y x)
//          (Equal Z x) )) )
// ```
// Conj (g1: State -> Stream) (g2: State -> Stream) : (State -> Stream)
(Conj g1 g2) = λstate( (Bind (g1 state) g2) )

// RUNSOME
// ----
// Creates a fresh query LVar and consume a bounded number of results from
// the relational program.
//
// For example:
// ```
// (RunSome 4 λq(
//      ... // add (Fresh ...) or (Disj ...) or (Conj ...) or (Equal ...)
// )
// ```
// RunSome (n: U60) (fn: LVar -> (State -> Stream)) : (State -> Stream)
(RunSome n fn) = (Take n ((Fresh fn) (State.Empty)))

// RUNAll
// ----
// Creates a fresh query LVar and consume all results the relation program.
//
// For example:
// (RunAll λq(
//      ... // add (Fresh ...) or (Disj ...) or (Conj ...) or (Equal ...)
// )
// RunN (n: U60) (fn: LVar -> (State -> Stream)) : (State -> Stream)
(RunAll fn) = ((Fresh fn) State.Empty)

// SUCCEED
// ------
// A goal that always suceeds
//
// Succeed : (State -> Stream)
(Succeed) = (Equal 1 1)

// FAIL
// ----
// A goal that always fails
//
// Fail : (State -> Stream)
(Fail) = (Equal 1 0)
